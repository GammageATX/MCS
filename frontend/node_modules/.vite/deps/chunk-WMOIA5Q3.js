import {
  Generate,
  configReducer,
  coreReducer,
  createId,
  defaultJsonFormsI18nState,
  defaultMapStateToEnumCellProps,
  i18nReducer,
  index,
  isControl,
  mapDispatchToArrayControlProps,
  mapDispatchToControlProps,
  mapDispatchToMultiEnumProps,
  mapStateToAllOfProps,
  mapStateToAnyOfProps,
  mapStateToArrayControlProps,
  mapStateToArrayLayoutProps,
  mapStateToCellProps,
  mapStateToControlProps,
  mapStateToControlWithDetailProps,
  mapStateToDispatchCellProps,
  mapStateToEnumControlProps,
  mapStateToJsonFormsRendererProps,
  mapStateToLabelProps,
  mapStateToLayoutProps,
  mapStateToMasterListItemProps,
  mapStateToMultiEnumControlProps,
  mapStateToOneOfEnumCellProps,
  mapStateToOneOfEnumControlProps,
  mapStateToOneOfProps,
  removeId,
  require_isObject,
  require_maxBy,
  require_root,
  require_toNumber
} from "./chunk-ETUF23DC.js";
import {
  require_react
} from "./chunk-SAXTXXTX.js";
import {
  __commonJS,
  __toESM
} from "./chunk-CEQRFMJQ.js";

// ../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/now.js
var require_now = __commonJS({
  "../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/now.js"(exports, module) {
    var root = require_root();
    var now = function() {
      return root.Date.now();
    };
    module.exports = now;
  }
});

// ../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/debounce.js
var require_debounce = __commonJS({
  "../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/debounce.js"(exports, module) {
    var isObject = require_isObject();
    var now = require_now();
    var toNumber = require_toNumber();
    var FUNC_ERROR_TEXT = "Expected a function";
    var nativeMax = Math.max;
    var nativeMin = Math.min;
    function debounce2(func, wait, options) {
      var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = "maxWait" in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      function invokeFunc(time) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = void 0;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }
      function leadingEdge(time) {
        lastInvokeTime = time;
        timerId = setTimeout(timerExpired, wait);
        return leading ? invokeFunc(time) : result;
      }
      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
        return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
      }
      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
        return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }
      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        timerId = setTimeout(timerExpired, remainingWait(time));
      }
      function trailingEdge(time) {
        timerId = void 0;
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = void 0;
        return result;
      }
      function cancel() {
        if (timerId !== void 0) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = void 0;
      }
      function flush() {
        return timerId === void 0 ? result : trailingEdge(now());
      }
      function debounced() {
        var time = now(), isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
          if (timerId === void 0) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === void 0) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }
    module.exports = debounce2;
  }
});

// ../node_modules/.pnpm/@jsonforms+react@3.1.0_@jsonforms+core@3.1.0_react@18.2.0/node_modules/@jsonforms/react/lib/jsonforms-react.esm.js
var import_react = __toESM(require_react());
var import_maxBy = __toESM(require_maxBy());
var import_debounce = __toESM(require_debounce());
var RendererComponent = class extends import_react.default.Component {
  constructor(props) {
    super(props);
  }
};
var Control = class extends RendererComponent {
  constructor(props) {
    super(props);
    this.handleChange = (value) => {
      this.setState({ value });
      this.updateData(value);
    };
    this.onFocus = () => {
      this.setState({ isFocused: true });
    };
    this.onBlur = () => {
      this.setState({ isFocused: false });
    };
    this.updateData = (value) => {
      this.props.handleChange(this.props.path, value);
    };
    this.state = {
      value: props.data ? props.data : "",
      isFocused: false
    };
  }
};
var UnknownRenderer = class extends import_react.Component {
  render() {
    return import_react.default.createElement(
      "div",
      { style: { color: "red" } },
      "No applicable ",
      this.props.type,
      " found."
    );
  }
};
var initialCoreState = {
  data: {},
  schema: {},
  uischema: void 0,
  errors: [],
  additionalErrors: [],
  validator: void 0,
  ajv: void 0
};
var JsonFormsContext = import_react.default.createContext({
  core: initialCoreState,
  renderers: []
});
var useEffectAfterFirstRender = (effect, dependencies) => {
  const firstExecution = (0, import_react.useRef)(true);
  (0, import_react.useEffect)(() => {
    if (firstExecution.current) {
      firstExecution.current = false;
      return;
    }
    effect();
  }, dependencies);
};
var JsonFormsStateProvider = ({ children, initState, onChange }) => {
  var _a, _b, _c;
  const { data, schema, uischema, ajv, validationMode, additionalErrors } = initState.core;
  const [core, coreDispatch] = (0, import_react.useReducer)(coreReducer, void 0, () => coreReducer(initState.core, index.init(data, schema, uischema, {
    ajv,
    validationMode,
    additionalErrors
  })));
  (0, import_react.useEffect)(() => {
    coreDispatch(index.updateCore(data, schema, uischema, {
      ajv,
      validationMode,
      additionalErrors
    }));
  }, [data, schema, uischema, ajv, validationMode, additionalErrors]);
  const [config, configDispatch] = (0, import_react.useReducer)(configReducer, void 0, () => configReducer(void 0, index.setConfig(initState.config)));
  useEffectAfterFirstRender(() => {
    configDispatch(index.setConfig(initState.config));
  }, [initState.config]);
  const [i18n, i18nDispatch] = (0, import_react.useReducer)(i18nReducer, void 0, () => {
    var _a2, _b2, _c2;
    return i18nReducer(initState.i18n, index.updateI18n((_a2 = initState.i18n) == null ? void 0 : _a2.locale, (_b2 = initState.i18n) == null ? void 0 : _b2.translate, (_c2 = initState.i18n) == null ? void 0 : _c2.translateError));
  });
  (0, import_react.useEffect)(() => {
    var _a2, _b2, _c2;
    i18nDispatch(index.updateI18n((_a2 = initState.i18n) == null ? void 0 : _a2.locale, (_b2 = initState.i18n) == null ? void 0 : _b2.translate, (_c2 = initState.i18n) == null ? void 0 : _c2.translateError));
  }, [
    (_a = initState.i18n) == null ? void 0 : _a.locale,
    (_b = initState.i18n) == null ? void 0 : _b.translate,
    (_c = initState.i18n) == null ? void 0 : _c.translateError
  ]);
  const contextValue = (0, import_react.useMemo)(() => ({
    core,
    renderers: initState.renderers,
    cells: initState.cells,
    config,
    uischemas: initState.uischemas,
    readonly: initState.readonly,
    i18n,
    dispatch: coreDispatch
  }), [
    core,
    initState.renderers,
    initState.cells,
    config,
    initState.uischemas,
    initState.readonly,
    i18n
  ]);
  const onChangeRef = (0, import_react.useRef)(onChange);
  (0, import_react.useEffect)(() => {
    onChangeRef.current = onChange;
  }, [onChange]);
  const debouncedEmit = (0, import_react.useCallback)((0, import_debounce.default)((...args) => {
    var _a2;
    return (_a2 = onChangeRef.current) == null ? void 0 : _a2.call(onChangeRef, ...args);
  }, 10), []);
  (0, import_react.useEffect)(() => {
    debouncedEmit({ data: core.data, errors: core.errors });
  }, [core.data, core.errors]);
  return import_react.default.createElement(JsonFormsContext.Provider, { value: contextValue }, children);
};
var useJsonForms = () => (0, import_react.useContext)(JsonFormsContext);
var ctxToArrayLayoutProps = (ctx, props) => mapStateToArrayLayoutProps({ jsonforms: { ...ctx } }, props);
var ctxToArrayControlProps = (ctx, props) => mapStateToArrayControlProps({ jsonforms: { ...ctx } }, props);
var ctxToLayoutProps = (ctx, props) => mapStateToLayoutProps({ jsonforms: { ...ctx } }, props);
var ctxToControlProps = (ctx, props) => mapStateToControlProps({ jsonforms: { ...ctx } }, props);
var ctxToEnumControlProps = (ctx, props) => {
  var _a;
  const enumProps = mapStateToEnumControlProps({ jsonforms: { ...ctx } }, props);
  const options = (0, import_react.useMemo)(() => enumProps.options, [props.options, enumProps.schema, (_a = ctx.i18n) == null ? void 0 : _a.translate]);
  return { ...enumProps, options };
};
var ctxToOneOfEnumControlProps = (ctx, props) => {
  var _a;
  const enumProps = mapStateToOneOfEnumControlProps({ jsonforms: { ...ctx } }, props);
  const options = (0, import_react.useMemo)(() => enumProps.options, [props.options, enumProps.schema, (_a = ctx.i18n) == null ? void 0 : _a.translate]);
  return { ...enumProps, options };
};
var ctxToMultiEnumControlProps = (ctx, props) => {
  var _a;
  const enumProps = mapStateToMultiEnumControlProps({ jsonforms: { ...ctx } }, props);
  const options = (0, import_react.useMemo)(() => enumProps.options, [enumProps.schema, (_a = ctx.i18n) == null ? void 0 : _a.translate]);
  return { ...enumProps, options };
};
var ctxToControlWithDetailProps = (ctx, props) => mapStateToControlWithDetailProps({ jsonforms: { ...ctx } }, props);
var ctxToAllOfProps = (ctx, ownProps) => {
  const props = mapStateToAllOfProps({ jsonforms: { ...ctx } }, ownProps);
  return {
    ...props
  };
};
var ctxDispatchToControlProps = (dispatch) => (0, import_react.useMemo)(() => mapDispatchToControlProps(dispatch), [dispatch]);
var ctxToAnyOfProps = (ctx, ownProps) => {
  const props = mapStateToAnyOfProps({ jsonforms: { ...ctx } }, ownProps);
  const dispatchProps = ctxDispatchToControlProps(ctx.dispatch);
  return {
    ...props,
    ...dispatchProps
  };
};
var ctxToOneOfProps = (ctx, ownProps) => {
  const props = mapStateToOneOfProps({ jsonforms: { ...ctx } }, ownProps);
  const dispatchProps = ctxDispatchToControlProps(ctx.dispatch);
  return {
    ...props,
    ...dispatchProps
  };
};
var ctxToJsonFormsRendererProps = (ctx, ownProps) => mapStateToJsonFormsRendererProps({ jsonforms: { ...ctx } }, ownProps);
var ctxDispatchToArrayControlProps = (dispatch) => ({
  ...ctxDispatchToControlProps(dispatch),
  ...(0, import_react.useMemo)(() => mapDispatchToArrayControlProps(dispatch), [dispatch])
});
var ctxToMasterListItemProps = (ctx, ownProps) => mapStateToMasterListItemProps({ jsonforms: { ...ctx } }, ownProps);
var ctxToCellProps = (ctx, ownProps) => {
  return mapStateToCellProps({ jsonforms: { ...ctx } }, ownProps);
};
var ctxToEnumCellProps = (ctx, ownProps) => {
  var _a;
  const cellProps = defaultMapStateToEnumCellProps({ jsonforms: { ...ctx } }, ownProps);
  const options = (0, import_react.useMemo)(() => cellProps.options, [ownProps.options, cellProps.schema, (_a = ctx.i18n) == null ? void 0 : _a.translate]);
  return { ...cellProps, options };
};
var ctxToOneOfEnumCellProps = (ctx, props) => {
  var _a;
  const enumCellProps = mapStateToOneOfEnumCellProps({ jsonforms: { ...ctx } }, props);
  const options = (0, import_react.useMemo)(() => enumCellProps.options, [props.options, enumCellProps.schema, (_a = ctx.i18n) == null ? void 0 : _a.translate]);
  return { ...enumCellProps, options };
};
var ctxToDispatchCellProps = (ctx, ownProps) => {
  return mapStateToDispatchCellProps({ jsonforms: { ...ctx } }, ownProps);
};
var ctxDispatchToMultiEnumProps = (dispatch) => ({
  ...ctxDispatchToControlProps(dispatch),
  ...(0, import_react.useMemo)(() => mapDispatchToMultiEnumProps(dispatch), [dispatch])
});
var ctxToLabelProps = (ctx, ownProps) => {
  return mapStateToLabelProps({ jsonforms: { ...ctx } }, ownProps);
};
var withJsonFormsContext = (Component2) => function WithJsonFormsContext(props) {
  const ctx = useJsonForms();
  return import_react.default.createElement(Component2, { ctx, props });
};
var withContextToJsonFormsRendererProps = (Component2) => function WithContextToJsonFormsRendererProps({ ctx, props }) {
  const contextProps = ctxToJsonFormsRendererProps(ctx, props);
  return import_react.default.createElement(Component2, Object.assign({}, props, contextProps));
};
var withContextToControlProps = (Component2) => function WithContextToControlProps({ ctx, props }) {
  const controlProps = ctxToControlProps(ctx, props);
  const dispatchProps = ctxDispatchToControlProps(ctx.dispatch);
  return import_react.default.createElement(Component2, Object.assign({}, props, controlProps, dispatchProps));
};
var withContextToLayoutProps = (Component2) => function WithContextToLayoutProps({ ctx, props }) {
  const layoutProps = ctxToLayoutProps(ctx, props);
  return import_react.default.createElement(Component2, Object.assign({}, props, layoutProps));
};
var withContextToOneOfProps = (Component2) => function WithContextToOneOfProps({ ctx, props }) {
  const oneOfProps = ctxToOneOfProps(ctx, props);
  const dispatchProps = ctxDispatchToControlProps(ctx.dispatch);
  return import_react.default.createElement(Component2, Object.assign({}, props, oneOfProps, dispatchProps));
};
var withContextToAnyOfProps = (Component2) => function WithContextToAnyOfProps({ ctx, props }) {
  const oneOfProps = ctxToAnyOfProps(ctx, props);
  const dispatchProps = ctxDispatchToControlProps(ctx.dispatch);
  return import_react.default.createElement(Component2, Object.assign({}, props, oneOfProps, dispatchProps));
};
var withContextToAllOfProps = (Component2) => function WithContextToAllOfProps({ ctx, props }) {
  const allOfProps = ctxToAllOfProps(ctx, props);
  const dispatchProps = ctxDispatchToControlProps(ctx.dispatch);
  return import_react.default.createElement(Component2, Object.assign({}, props, allOfProps, dispatchProps));
};
var withContextToDetailProps = (Component2) => function WithContextToDetailProps({ ctx, props }) {
  const detailProps = ctxToControlWithDetailProps(ctx, props);
  return import_react.default.createElement(Component2, Object.assign({}, props, detailProps));
};
var withContextToArrayLayoutProps = (Component2) => function WithContextToArrayLayoutProps({ ctx, props }) {
  const arrayLayoutProps = ctxToArrayLayoutProps(ctx, props);
  const dispatchProps = ctxDispatchToArrayControlProps(ctx.dispatch);
  return import_react.default.createElement(Component2, Object.assign({}, props, arrayLayoutProps, dispatchProps));
};
var withContextToArrayControlProps = (Component2) => function WithContextToArrayControlProps({ ctx, props }) {
  const stateProps = ctxToArrayControlProps(ctx, props);
  const dispatchProps = ctxDispatchToArrayControlProps(ctx.dispatch);
  return import_react.default.createElement(Component2, Object.assign({}, props, stateProps, dispatchProps));
};
var withContextToMasterListItemProps = (Component2) => function WithContextToMasterListItemProps({ ctx, props }) {
  const stateProps = ctxToMasterListItemProps(ctx, props);
  return import_react.default.createElement(Component2, Object.assign({}, props, stateProps));
};
var withContextToCellProps = (Component2) => function WithContextToCellProps({ ctx, props }) {
  const cellProps = ctxToCellProps(ctx, props);
  const dispatchProps = ctxDispatchToControlProps(ctx.dispatch);
  return import_react.default.createElement(Component2, Object.assign({}, props, dispatchProps, cellProps));
};
var withContextToDispatchCellProps = (Component2) => function WithContextToDispatchCellProps({ ctx, props }) {
  const cellProps = ctxToDispatchCellProps(ctx, props);
  const dispatchProps = ctxDispatchToControlProps(ctx.dispatch);
  return import_react.default.createElement(Component2, Object.assign({}, props, dispatchProps, cellProps));
};
var withContextToEnumCellProps = (Component2) => function WithContextToEnumCellProps({ ctx, props }) {
  const cellProps = ctxToEnumCellProps(ctx, props);
  const dispatchProps = ctxDispatchToControlProps(ctx.dispatch);
  return import_react.default.createElement(Component2, Object.assign({}, props, dispatchProps, cellProps));
};
var withContextToEnumProps = (Component2) => function WithContextToEnumProps({ ctx, props }) {
  const stateProps = ctxToEnumControlProps(ctx, props);
  const dispatchProps = ctxDispatchToControlProps(ctx.dispatch);
  return import_react.default.createElement(Component2, Object.assign({}, props, dispatchProps, stateProps));
};
var withContextToOneOfEnumCellProps = (Component2) => function WithContextToOneOfEnumCellProps({ ctx, props }) {
  const cellProps = ctxToOneOfEnumCellProps(ctx, props);
  const dispatchProps = ctxDispatchToControlProps(ctx.dispatch);
  return import_react.default.createElement(Component2, Object.assign({}, props, dispatchProps, cellProps));
};
var withContextToOneOfEnumProps = (Component2) => function WithContextToOneOfEnumProps({ ctx, props }) {
  const stateProps = ctxToOneOfEnumControlProps(ctx, props);
  const dispatchProps = ctxDispatchToControlProps(ctx.dispatch);
  return import_react.default.createElement(Component2, Object.assign({}, props, dispatchProps, stateProps));
};
var withContextToMultiEnumProps = (Component2) => function WithContextToMultiEnumProps({ ctx, props }) {
  const stateProps = ctxToMultiEnumControlProps(ctx, props);
  const dispatchProps = ctxDispatchToMultiEnumProps(ctx.dispatch);
  return import_react.default.createElement(Component2, Object.assign({}, props, dispatchProps, stateProps));
};
var withContextToLabelProps = (Component2) => function WithContextToLabelProps({ ctx, props }) {
  const stateProps = ctxToLabelProps(ctx, props);
  return import_react.default.createElement(Component2, Object.assign({}, props, stateProps));
};
var withJsonFormsRendererProps = (Component2, memoize = true) => withJsonFormsContext(withContextToJsonFormsRendererProps(memoize ? import_react.default.memo(Component2) : Component2));
var withJsonFormsControlProps = (Component2, memoize = true) => withJsonFormsContext(withContextToControlProps(memoize ? import_react.default.memo(Component2) : Component2));
var withJsonFormsLayoutProps = (Component2, memoize = true) => withJsonFormsContext(withContextToLayoutProps(memoize ? import_react.default.memo(Component2) : Component2));
var withJsonFormsOneOfProps = (Component2, memoize = true) => withJsonFormsContext(withContextToOneOfProps(memoize ? import_react.default.memo(Component2) : Component2));
var withJsonFormsAnyOfProps = (Component2, memoize = true) => withJsonFormsContext(withContextToAnyOfProps(memoize ? import_react.default.memo(Component2) : Component2));
var withJsonFormsAllOfProps = (Component2, memoize = true) => withJsonFormsContext(withContextToAllOfProps(memoize ? import_react.default.memo(Component2) : Component2));
var withJsonFormsDetailProps = (Component2, memoize = true) => withJsonFormsContext(withContextToDetailProps(memoize ? import_react.default.memo(Component2) : Component2));
var withJsonFormsArrayLayoutProps = (Component2, memoize = true) => withJsonFormsContext(withContextToArrayLayoutProps(memoize ? import_react.default.memo(Component2) : Component2));
var withJsonFormsArrayControlProps = (Component2, memoize = true) => withJsonFormsContext(withContextToArrayControlProps(memoize ? import_react.default.memo(Component2) : Component2));
var withJsonFormsMasterListItemProps = (Component2, memoize = true) => withJsonFormsContext(withContextToMasterListItemProps(memoize ? import_react.default.memo(Component2) : Component2));
var withJsonFormsCellProps = (Component2, memoize = true) => withJsonFormsContext(withContextToCellProps(memoize ? import_react.default.memo(Component2) : Component2));
var withJsonFormsDispatchCellProps = (Component2, memoize = true) => withJsonFormsContext(withContextToDispatchCellProps(memoize ? import_react.default.memo(Component2) : Component2));
var withJsonFormsEnumCellProps = (Component2, memoize = true) => withJsonFormsContext(withContextToEnumCellProps(memoize ? import_react.default.memo(Component2) : Component2));
var withJsonFormsEnumProps = (Component2, memoize = true) => withJsonFormsContext(withContextToEnumProps(memoize ? import_react.default.memo(Component2) : Component2));
var withJsonFormsOneOfEnumCellProps = (Component2, memoize = true) => withJsonFormsContext(withContextToOneOfEnumCellProps(memoize ? import_react.default.memo(Component2) : Component2));
var withJsonFormsOneOfEnumProps = (Component2, memoize = true) => withJsonFormsContext(withContextToOneOfEnumProps(memoize ? import_react.default.memo(Component2) : Component2));
var withJsonFormsMultiEnumProps = (Component2, memoize = true) => withJsonFormsContext(withContextToMultiEnumProps(memoize ? import_react.default.memo(Component2) : Component2));
var withJsonFormsLabelProps = (Component2, memoize = true) => withJsonFormsContext(withContextToLabelProps(memoize ? import_react.default.memo(Component2) : Component2));
var withTranslateProps = (Component2) => function WithTranslateProps(props) {
  var _a, _b;
  const ctx = useJsonForms();
  const locale = ((_a = ctx.i18n) == null ? void 0 : _a.locale) ?? defaultJsonFormsI18nState.locale;
  const t = ((_b = ctx.i18n) == null ? void 0 : _b.translate) ?? defaultJsonFormsI18nState.translate;
  return import_react.default.createElement(Component2, Object.assign({}, props, { locale, t }));
};
var JsonFormsDispatchRenderer = class extends import_react.default.Component {
  constructor(props) {
    super(props);
    this.state = {
      id: isControl(props.uischema) ? createId(props.uischema.scope) : void 0
    };
  }
  componentWillUnmount() {
    if (isControl(this.props.uischema)) {
      removeId(this.state.id);
    }
  }
  render() {
    const { schema, rootSchema, uischema, path, enabled, renderers, cells, config } = this.props;
    return import_react.default.createElement(TestAndRender, { uischema, schema, rootSchema, path, enabled, renderers, cells, id: this.state.id, config });
  }
};
var TestAndRender = import_react.default.memo(function TestAndRender2(props) {
  const testerContext = (0, import_react.useMemo)(() => ({
    rootSchema: props.rootSchema,
    config: props.config
  }), [props.rootSchema, props.config]);
  const renderer = (0, import_react.useMemo)(() => (0, import_maxBy.default)(props.renderers, (r) => r.tester(props.uischema, props.schema, testerContext)), [props.renderers, props.uischema, props.schema, testerContext]);
  if (renderer === void 0 || renderer.tester(props.uischema, props.schema, testerContext) === -1) {
    return import_react.default.createElement(UnknownRenderer, { type: "renderer" });
  } else {
    const Render = renderer.renderer;
    return import_react.default.createElement(Render, { uischema: props.uischema, schema: props.schema, path: props.path, enabled: props.enabled, renderers: props.renderers, cells: props.cells, id: props.id });
  }
});
var ResolvedJsonFormsDispatchRenderer = class extends JsonFormsDispatchRenderer {
  constructor(props) {
    super(props);
  }
};
var JsonFormsDispatch = withJsonFormsRendererProps(JsonFormsDispatchRenderer);
var ResolvedJsonFormsDispatch = withJsonFormsRendererProps(ResolvedJsonFormsDispatchRenderer);
var JsonForms = (props) => {
  const { ajv, data, schema, uischema, renderers, cells, onChange, config, uischemas, readonly, validationMode, i18n, additionalErrors } = props;
  const schemaToUse = (0, import_react.useMemo)(() => schema !== void 0 ? schema : Generate.jsonSchema(data), [schema, data]);
  const uischemaToUse = (0, import_react.useMemo)(() => typeof uischema === "object" ? uischema : Generate.uiSchema(schemaToUse), [uischema, schemaToUse]);
  return import_react.default.createElement(
    JsonFormsStateProvider,
    { initState: {
      core: {
        ajv,
        data,
        schema: schemaToUse,
        uischema: uischemaToUse,
        validationMode,
        additionalErrors
      },
      config,
      uischemas,
      renderers,
      cells,
      readonly,
      i18n
    }, onChange },
    import_react.default.createElement(JsonFormsDispatch, null)
  );
};
var Dispatch = ({ uischema, schema, rootSchema, path, cells, id, enabled, renderers, config }) => {
  const testerContext = (0, import_react.useMemo)(() => ({
    rootSchema,
    config
  }), [rootSchema, config]);
  const cell = (0, import_react.useMemo)(() => (0, import_maxBy.default)(cells, (r) => r.tester(uischema, schema, testerContext)), [cells, uischema, schema, testerContext]);
  if (cell === void 0 || cell.tester(uischema, schema, testerContext) === -1) {
    return import_react.default.createElement(UnknownRenderer, { type: "cell" });
  } else {
    const Cell = cell.cell;
    return import_react.default.createElement(Cell, { uischema, schema, enabled, path, id, renderers, cells });
  }
};
var DispatchCell = withJsonFormsDispatchCellProps(Dispatch);

export {
  require_debounce,
  RendererComponent,
  Control,
  UnknownRenderer,
  JsonFormsContext,
  JsonFormsStateProvider,
  useJsonForms,
  ctxToArrayLayoutProps,
  ctxToArrayControlProps,
  ctxToLayoutProps,
  ctxToControlProps,
  ctxToEnumControlProps,
  ctxToOneOfEnumControlProps,
  ctxToMultiEnumControlProps,
  ctxToControlWithDetailProps,
  ctxToAllOfProps,
  ctxDispatchToControlProps,
  ctxToAnyOfProps,
  ctxToOneOfProps,
  ctxToJsonFormsRendererProps,
  ctxDispatchToArrayControlProps,
  ctxToMasterListItemProps,
  ctxToCellProps,
  ctxToEnumCellProps,
  ctxToOneOfEnumCellProps,
  ctxToDispatchCellProps,
  ctxDispatchToMultiEnumProps,
  ctxToLabelProps,
  withJsonFormsContext,
  withContextToJsonFormsRendererProps,
  withJsonFormsRendererProps,
  withJsonFormsControlProps,
  withJsonFormsLayoutProps,
  withJsonFormsOneOfProps,
  withJsonFormsAnyOfProps,
  withJsonFormsAllOfProps,
  withJsonFormsDetailProps,
  withJsonFormsArrayLayoutProps,
  withJsonFormsArrayControlProps,
  withJsonFormsMasterListItemProps,
  withJsonFormsCellProps,
  withJsonFormsDispatchCellProps,
  withJsonFormsEnumCellProps,
  withJsonFormsEnumProps,
  withJsonFormsOneOfEnumCellProps,
  withJsonFormsOneOfEnumProps,
  withJsonFormsMultiEnumProps,
  withJsonFormsLabelProps,
  withTranslateProps,
  JsonFormsDispatchRenderer,
  ResolvedJsonFormsDispatchRenderer,
  JsonFormsDispatch,
  ResolvedJsonFormsDispatch,
  JsonForms,
  Dispatch,
  DispatchCell
};
//# sourceMappingURL=chunk-WMOIA5Q3.js.map
