openapi: 3.0.0
info:
  title: MCS Communication Service API
  description: |
    API documentation for the Machine Control System (MCS) Communication Service.
    This service handles hardware communication, motion control, and equipment state management.
  version: 1.0.0
  contact:
    name: MCS Support
servers:
- url: http://localhost:8003
  description: Local development server

tags:
- name: system
  description: System-wide operations and health monitoring
- name: motion
  description: Motion control and positioning operations
- name: equipment
  description: Equipment control and state management
- name: state
  description: Real-time state monitoring via WebSocket

components:
  schemas:
    Position:
      type: object
      properties:
        x:
          type: number
          format: float
          description: X-axis position in mm
        y:
          type: number
          format: float
          description: Y-axis position in mm
        z:
          type: number
          format: float
          description: Z-axis position in mm
      required: [ x, y, z ]

    AxisStatus:
      type: object
      properties:
        position:
          type: number
          format: float
          description: Current axis position
        in_position:
          type: boolean
          description: Whether axis is at target position
        moving:
          type: boolean
          description: Whether axis is currently moving
        error:
          type: boolean
          description: Whether axis has an error
        homed:
          type: boolean
          description: Whether axis is homed
      required: [ position, in_position, moving, error, homed ]

    SystemStatus:
      type: object
      properties:
        x_axis:
          $ref: '#/components/schemas/AxisStatus'
        y_axis:
          $ref: '#/components/schemas/AxisStatus'
        z_axis:
          $ref: '#/components/schemas/AxisStatus'
        module_ready:
          type: boolean
          description: Whether motion module is ready
      required: [ x_axis, y_axis, z_axis, module_ready ]

    MotionState:
      type: object
      properties:
        position:
          $ref: '#/components/schemas/Position'
        status:
          $ref: '#/components/schemas/SystemStatus'
      required: [ position, status ]

    GasState:
      type: object
      properties:
        main_flow_rate:
          type: number
          format: float
          description: Main gas flow rate in SLPM
        feeder_flow_rate:
          type: number
          format: float
          description: Feeder gas flow rate in SLPM
        main_valve_state:
          type: boolean
          description: Main gas valve state (open/closed)
        feeder_valve_state:
          type: boolean
          description: Feeder gas valve state (open/closed)
      required: [ main_flow_rate, feeder_flow_rate, main_valve_state, feeder_valve_state ]

    VacuumState:
      type: object
      properties:
        chamber_pressure:
          type: number
          format: float
          description: Chamber pressure in Torr
        gate_valve_state:
          type: boolean
          description: Gate valve state (open/closed)
        mechanical_pump_state:
          type: boolean
          description: Mechanical pump state (on/off)
        booster_pump_state:
          type: boolean
          description: Booster pump state (on/off)
        vent_valve_state:
          type: boolean
          description: Vent valve state (open/closed)
      required: [ chamber_pressure, gate_valve_state, mechanical_pump_state, booster_pump_state, vent_valve_state ]

    FeederState:
      type: object
      properties:
        running:
          type: boolean
          description: Whether feeder is running
        frequency:
          type: number
          format: float
          description: Feeder frequency in Hz
      required: [ running, frequency ]

    DeagglomeratorState:
      type: object
      properties:
        duty_cycle:
          type: number
          format: float
          description: Deagglomerator duty cycle percentage
      required: [ duty_cycle ]

    NozzleState:
      type: object
      properties:
        active_nozzle:
          type: integer
          enum: [ 1, 2 ]
          description: Currently active nozzle (1 or 2)
        shutter_state:
          type: boolean
          description: Shutter state (open/closed)
      required: [ active_nozzle, shutter_state ]

    PressureState:
      type: object
      properties:
        chamber:
          type: number
          format: float
          description: Chamber pressure in Torr
        feeder:
          type: number
          format: float
          description: Feeder pressure in PSI
        main_supply:
          type: number
          format: float
          description: Main gas supply pressure in PSI
        nozzle:
          type: number
          format: float
          description: Nozzle pressure in PSI
        regulator:
          type: number
          format: float
          description: Regulator pressure in PSI
      required: [ chamber, feeder, main_supply, nozzle, regulator ]

    HardwareState:
      type: object
      properties:
        motion_enabled:
          type: boolean
          description: Whether motion system is enabled
        plc_connected:
          type: boolean
          description: Whether PLC connection is established
        position_valid:
          type: boolean
          description: Whether current position is valid
      required: [ motion_enabled, plc_connected, position_valid ]

    ProcessState:
      type: object
      properties:
        gas_flow_stable:
          type: boolean
          description: Whether gas flows are stable
        powder_feed_active:
          type: boolean
          description: Whether powder feeding is active
        process_ready:
          type: boolean
          description: Whether system is ready for processing
      required: [ gas_flow_stable, powder_feed_active, process_ready ]

    EquipmentState:
      type: object
      properties:
        gas:
          $ref: '#/components/schemas/GasState'
        vacuum:
          $ref: '#/components/schemas/VacuumState'
        feeder:
          $ref: '#/components/schemas/FeederState'
        deagglomerator:
          $ref: '#/components/schemas/DeagglomeratorState'
        nozzle:
          $ref: '#/components/schemas/NozzleState'
        pressure:
          $ref: '#/components/schemas/PressureState'
        hardware:
          $ref: '#/components/schemas/HardwareState'
        process:
          $ref: '#/components/schemas/ProcessState'
      required: [ gas, vacuum, feeder, deagglomerator, nozzle, pressure, hardware, process ]

    ServiceHealth:
      type: object
      properties:
        status:
          type: string
          enum: [ OK, ERROR, DEGRADED, STARTING ]
          description: Overall service health status
        service:
          type: string
          description: Service name
        version:
          type: string
          description: Service version
        is_running:
          type: boolean
          description: Whether service is running
        uptime:
          type: number
          format: float
          description: Service uptime in seconds
        error:
          type: string
          nullable: true
          description: Error message if status is not OK
        components:
          type: object
          additionalProperties:
            type: object
            properties:
              status:
                type: string
                enum: [ OK, ERROR, DEGRADED ]
              error:
                type: string
                nullable: true
      required: [ status, service, version, is_running, uptime ]

    JogRequest:
      type: object
      properties:
        distance:
          type: number
          format: float
          description: Jog distance in mm
        velocity:
          type: number
          format: float
          description: Movement velocity in mm/s
      required: [ distance, velocity ]

    MoveRequest:
      type: object
      properties:
        x:
          type: number
          format: float
          description: Target X position in mm
        y:
          type: number
          format: float
          description: Target Y position in mm
        z:
          type: number
          format: float
          description: Target Z position in mm
        velocity:
          type: number
          format: float
          description: Movement velocity in mm/s
        wait_complete:
          type: boolean
          description: Whether to wait for move completion
          default: true
      required: [ x, y, z, velocity ]

    GasFlowRequest:
      type: object
      properties:
        flow_rate:
          type: number
          format: float
          description: Gas flow rate in SLPM
      required: [ flow_rate ]

    GasValveRequest:
      type: object
      properties:
        open:
          type: boolean
          description: Whether to open valve
      required: [ open ]

    VacuumPumpRequest:
      type: object
      properties:
        start:
          type: boolean
          description: Whether to start pump
      required: [ start ]

    GateValveRequest:
      type: object
      properties:
        position:
          type: string
          enum: [ open, closed ]
          description: Desired valve position
      required: [ position ]

    ShutterRequest:
      type: object
      properties:
        open:
          type: boolean
          description: Whether to open shutter
      required: [ open ]

    FeederRequest:
      type: object
      properties:
        frequency:
          type: number
          format: float
          description: Operating frequency in Hz
      required: [ frequency ]

    DeagglomeratorRequest:
      type: object
      properties:
        duty_cycle:
          type: number
          format: float
          description: Duty cycle percentage (0-100)
        frequency:
          type: number
          format: float
          description: Operating frequency in Hz
      required: [ duty_cycle, frequency ]

    FeederStateRequest:
      type: object
      properties:
        running:
          type: boolean
          description: Whether to run feeder
      required: [ running ]

    NozzleSelectRequest:
      type: object
      properties:
        nozzle_id:
          type: integer
          enum: [ 1, 2 ]
          description: Nozzle to select (1 or 2)
      required: [ nozzle_id ]

paths:
  /health:
    get:
      tags: [ system ]
      summary: Get service health status
      description: Returns the health status of the communication service and its components
      responses:
        '200':
          description: Service health status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceHealth'

  /start:
    post:
      tags: [ system ]
      summary: Start service
      description: Start the communication service
      responses:
        '200':
          description: Service started successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ started ]

  /stop:
    post:
      tags: [ system ]
      summary: Stop service
      description: Stop the communication service
      responses:
        '200':
          description: Service stopped successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ stopped ]

  /motion/position:
    get:
      tags: [ motion ]
      summary: Get current position
      description: Get current XYZ position
      responses:
        '200':
          description: Current position
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Position'

  /motion/status:
    get:
      tags: [ motion ]
      summary: Get motion system status
      description: Get status of motion system and all axes
      responses:
        '200':
          description: Motion system status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemStatus'

  /motion/state:
    get:
      tags: [ motion ]
      summary: Get motion state
      description: Get combined motion state including position and status
      responses:
        '200':
          description: Current motion state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MotionState'

  /motion/jog/{axis}:
    post:
      tags: [ motion ]
      summary: Jog axis
      description: Perform relative move on single axis
      parameters:
      - name: axis
        in: path
        required: true
        schema:
          type: string
          enum: [ x, y, z ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JogRequest'
      responses:
        '200':
          description: Jog command accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ success ]

  /motion/move:
    post:
      tags: [ motion ]
      summary: Execute move
      description: Execute coordinated XYZ move
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveRequest'
      responses:
        '200':
          description: Move command accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ success ]

  /motion/home/set:
    post:
      tags: [ motion ]
      summary: Set home position
      description: Set current position as home
      responses:
        '200':
          description: Home position set
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ success ]

  /motion/home/move:
    post:
      tags: [ motion ]
      summary: Move to home
      description: Move to home position
      responses:
        '200':
          description: Move to home command accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ success ]

  /equipment/state:
    get:
      tags: [ equipment ]
      summary: Get equipment state
      description: Get current state of all equipment
      responses:
        '200':
          description: Current equipment state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EquipmentState'

  /equipment/gas/main/flow:
    post:
      tags: [ equipment ]
      summary: Set main gas flow
      description: Set main gas flow rate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GasFlowRequest'
      responses:
        '200':
          description: Flow rate set successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ success ]

  /equipment/gas/feeder/flow:
    post:
      tags: [ equipment ]
      summary: Set feeder gas flow
      description: Set feeder gas flow rate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GasFlowRequest'
      responses:
        '200':
          description: Flow rate set successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ success ]

  /equipment/gas/main/valve:
    put:
      tags: [ equipment ]
      summary: Set main gas valve
      description: Set main gas valve state
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GasValveRequest'
      responses:
        '200':
          description: Valve state set successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ success ]

  /equipment/gas/feeder/valve:
    put:
      tags: [ equipment ]
      summary: Set feeder gas valve
      description: Set feeder gas valve state
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GasValveRequest'
      responses:
        '200':
          description: Valve state set successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ success ]

  /equipment/vacuum/gate:
    put:
      tags: [ equipment ]
      summary: Set gate valve
      description: Set vacuum gate valve state
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GateValveRequest'
      responses:
        '200':
          description: Valve state set successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ success ]

  /equipment/vacuum/mechanical_pump/state:
    put:
      tags: [ equipment ]
      summary: Set mechanical pump state
      description: Set mechanical pump running state
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VacuumPumpRequest'
      responses:
        '200':
          description: Pump state set successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ success ]

  /equipment/vacuum/booster_pump/state:
    put:
      tags: [ equipment ]
      summary: Set booster pump state
      description: Set booster pump running state
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VacuumPumpRequest'
      responses:
        '200':
          description: Pump state set successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ success ]

  /equipment/feeder/{feeder_id}/state:
    put:
      tags: [ equipment ]
      summary: Set feeder state
      description: Set feeder running state
      parameters:
      - name: feeder_id
        in: path
        required: true
        schema:
          type: integer
          enum: [ 1, 2 ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeederStateRequest'
      responses:
        '200':
          description: Feeder state set successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ success ]

  /equipment/feeder/{feeder_id}/frequency:
    post:
      tags: [ equipment ]
      summary: Set feeder frequency
      description: Set feeder operating frequency
      parameters:
      - name: feeder_id
        in: path
        required: true
        schema:
          type: integer
          enum: [ 1, 2 ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeederRequest'
      responses:
        '200':
          description: Frequency set successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ success ]

  /equipment/deagg/{deagg_id}/duty_cycle:
    post:
      tags: [ equipment ]
      summary: Set deagglomerator duty cycle
      description: Set deagglomerator duty cycle
      parameters:
      - name: deagg_id
        in: path
        required: true
        schema:
          type: integer
          enum: [ 1, 2 ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeagglomeratorRequest'
      responses:
        '200':
          description: Duty cycle set successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ success ]

  /equipment/deagg/{deagg_id}/frequency:
    post:
      tags: [ equipment ]
      summary: Set deagglomerator frequency
      description: Set deagglomerator operating frequency
      parameters:
      - name: deagg_id
        in: path
        required: true
        schema:
          type: integer
          enum: [ 1, 2 ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeagglomeratorRequest'
      responses:
        '200':
          description: Frequency set successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ success ]

  /equipment/nozzle/select:
    put:
      tags: [ equipment ]
      summary: Select nozzle
      description: Set active nozzle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NozzleSelectRequest'
      responses:
        '200':
          description: Nozzle selected successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ success ]

  /equipment/nozzle/shutter:
    put:
      tags: [ equipment ]
      summary: Set shutter state
      description: Set nozzle shutter state
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShutterRequest'
      responses:
        '200':
          description: Shutter state set successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ success ]

  /ws/state:
    get:
      tags: [ state ]
      summary: System state WebSocket
      description: WebSocket endpoint for combined system state updates
      responses:
        '101':
          description: WebSocket connection established

  /equipment/ws/state:
    get:
      tags: [ state ]
      summary: Equipment state WebSocket
      description: WebSocket endpoint for equipment state updates
      responses:
        '101':
          description: WebSocket connection established

  /motion/ws/state:
    get:
      tags: [ state ]
      summary: Motion state WebSocket
      description: WebSocket endpoint for motion state updates
      responses:
        '101':
          description: WebSocket connection established
