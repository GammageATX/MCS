services:
  config:
    build:
      context: .
      dockerfile: backend/Dockerfile
      target: service
    working_dir: /app
    command: python -m mcs.api.config.__main__
    volumes:
      - ./backend/config:/app/backend/config
      - ./backend/data:/app/backend/data
      - ./backend/logs:/app/backend/logs
    ports:
      - "8001:8001"
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8001/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  process:
    build:
      context: .
      dockerfile: backend/Dockerfile
      target: service
    working_dir: /app
    command: python -m mcs.api.process.__main__
    volumes:
      - ./backend/config:/app/backend/config
      - ./backend/data:/app/backend/data
      - ./backend/logs:/app/backend/logs
    ports:
      - "8003:8003"
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8003/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  communication:
    build:
      context: .
      dockerfile: backend/Dockerfile
      target: service
    working_dir: /app
    command: python -m mcs.api.communication.__main__
    volumes:
      - ./backend/config:/app/backend/config
      - ./backend/data:/app/backend/data
      - ./backend/logs:/app/backend/logs
    ports:
      - "8002:8002"
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      - MCS_LOG_LEVEL=INFO
      - MCS_FILE_LOG_LEVEL=DEBUG
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8002/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  data_collection:
    build:
      context: .
      dockerfile: backend/Dockerfile
      target: service
    working_dir: /app
    command: python -m mcs.api.data_collection.__main__
    volumes:
      - ./backend/config:/app/backend/config
      - ./backend/data:/app/backend/data
      - ./backend/logs:/app/backend/logs
    ports:
      - "8004:8004"
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8004/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    ports:
      - "5173:80"
    environment:
      - NODE_ENV=development
      - VITE_CONFIG_API_URL=http://config:8001
      - VITE_PROCESS_API_URL=http://process:8003
      - VITE_COMMUNICATION_API_URL=http://communication:8002
      - VITE_DATA_COLLECTION_API_URL=http://data_collection:8004
    depends_on:
      config:
        condition: service_healthy
      process:
        condition: service_healthy
      communication:
        condition: service_healthy
      data_collection:
        condition: service_healthy

  redis:
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      redis:
        condition: service_healthy

  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=dbpassword
      - POSTGRES_DB=postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  adminer:
    image: adminer:latest
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
      - ADMINER_DESIGN=dracula
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  redis_data:
  postgres_data:

networks:
  default:
    driver: bridge 